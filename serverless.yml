service: serverless-aws-template

useDotenv: true
frameworkVersion: '2'
unresolvedVariablesNotificationMode: error

plugins:
  - serverless-plugin-scripts

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs14.x

  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221

  logRetentionInDays: 14
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies.
    serverSideEncryption: AES256
    tags: # Tags that will be added to each of the deployment resources
      ProvisionedBy: ${self:custom.commonTags.provisionedBy}
      Project: ${self:custom.commonTags.project}
  stackTags: # Optional CF stack tags
    ProvisionedBy: ${self:custom.commonTags.provisionedBy}
    Project: ${self:custom.commonTags.project}
  tags: # service wide tags
    ProvisionedBy: ${self:custom.commonTags.provisionedBy}
    Project: ${self:custom.commonTags.project}
    Owner: Ackama

  stage: ${opt:stage, 'staging'}

  # These environment vars are installed into **all** functions in the service
  environment:
    NODE_OPTIONS: '-r source-map-support/register'
    SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
    SLACK_CHANNEL: ${env:SLACK_CHANNEL}

custom:
  resources:
    prefix: ${self:service}-${self:provider.stage}
    #uploadsBucket: ${self:custom.resources.prefix}-uploads
  commonTags:
    provisionedBy: Serverless
    project: serverless-aws-template
  outDir: ${file(./tsconfig.build.json):compilerOptions.outDir}
  prepareForPacking: &prepareForPacking |
    npm run --silent build
  scripts:
    hooks:
      'before:package:createDeploymentArtifacts': *prepareForPacking
      'before:deploy:function:packageFunction': *prepareForPacking

package:
  patterns:
    - '!**/*'
    - 'package.json'
    - 'node_modules/**'
    - '!node_modules/@types/**'
    - '!**/tsconfig*.json'
    - '!**/*.d.ts'
    - '!**/*.gradle'
    - '!**/*.h'
    - '!**/*.html'
    - '!**/*.java'
    - '!**/*.m'
    - '!**/*.map'
    - '!**/*.md'
    - '!**/*.npmignore'
    - '!**/*.pbxproj'
    - '!**/*.pem'
    - '!**/*.podspec'
    - '!**/*.ts'
    - '!**/*.tsbuildinfo'
    - '!**/*.txt'
    - '!**/*.un~'
    - '!**/*.xcworkspacedata'
    - '!**/*.xml'
    - '!**/*.yml'
    - '!**/Makefile'
    - '!**/node_modules/.package-lock.json'
    - ${self:custom.outDir}/**/*
functions:
  api-lambda:
    handler: ${self:custom.outDir}/api-lambda/index.handler
    tags:
      Purpose: An example of a lambda thats invoked by URL via API Gateway
    events:
      - http:
          path: /send
          method: post
  cloudwatch-lambda:
    handler: ${self:custom.outDir}/cloudwatch-lambda/index.handler
    tags:
      Purpose: An example of a lambda thats invoked by CloudWatch log events
    events:
      - cloudwatchLog:
          logGroup: '/aws/lambda/${self:service}-${opt:stage, self:provider.stage}-scheduled-lambda'
          filter: '"source: ''aws.events''"'
  scheduled-lambda:
    handler: ${self:custom.outDir}/scheduled-lambda/index.handler
    tags:
      Purpose: An example of a lambda thats invoked by a cron schedule
    events:
      - schedule:
          # run every day at 17:00 UTC (04:00 -> 06:00 in NZ)
          rate: cron(0 17 * * ? *)
  sns-lambda:
    handler: ${self:custom.outDir}/sns-lambda/index.handler
    tags:
      Purpose: An example of a lambda thats invoked by some SNS topics
    events:
      # https://serverless.com/framework/docs/providers/aws/events/sns/
      # to use a pre-existing SNS, provide an arn as the events name, or via the `arn` property
      - sns: my-sns-topic

resources:
  Resources: ${file(./resources.yml)}
